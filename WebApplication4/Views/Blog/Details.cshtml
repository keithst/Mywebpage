@model WebApplication4.Models.BlogPost
@using Microsoft.AspNet.Identity;
@{
    ViewBag.Title = "Details";
}

<body class="bgcolor">
    <div class="bodytext boxshadow">
        <div class="headtext">
            <h1>@Model.Title</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-2">
        </div>
        <div class="col-xs-4">

        </div>
        <div class="col-xs-6" align="right">
            <div class="row">
                <div class="col-xs-4"></div>
                <div class="col-xs-8">
                    <ul class="list-inline">
                        <li>
                            <a href="@Url.Action("Register", "Account")" class="btn btn-default btn-sm boxshadow"><span class="network-name shadow">Register</span></a>
                        </li>
                        <li>
                            <a href="@Url.Action("LogIn", "Account")" class="btn btn-default btn-sm boxshadow"><span class="network-name shadow">Log In</span></a>
                        </li>
                        @if (System.Web.HttpContext.Current.User.Identity.IsAuthenticated)
                        {
                            <li>
                                <form action="@Url.Action("LogOff", "Account")" method="post" class="formalign">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-default btn-sm boxshadow"><span class="network-name shadow">Log Out</span></button>
                                </form>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div><br />
        <div class="row">
            <div class="col-xs-8">
                <div class="row boxshadowblog">
                    <div class="col-xs-12">
                        @if (Model.MediaURL != null)
                        {
                            <img class="img-responsive image-b" src="@Model.MediaURL" alt="">
                        }
                        <h1 class="shadowlink">@Model.Title</h1>
                        <hr class="hrcolor">
                        @{
                            var daysp = (System.DateTimeOffset.Now - Model.Created).Days;
                            var hoursp = (System.DateTimeOffset.Now - Model.Created).Hours;
                            var minsp = (System.DateTimeOffset.Now - Model.Created).Minutes;
                            string datestringp = "";
                            if (daysp > 0)
                            {
                                datestringp += daysp + " days, ";
                            }
                            if (hoursp > 0 || daysp > 0)
                            {
                                datestringp += hoursp + " hours, ";
                            }
                            if (minsp > 0 || hoursp > 0 || daysp > 0)
                            {
                                datestringp += minsp + " mins ago";
                            }
                            else
                            {
                                datestringp = "~1 min ago";
                            }
                            @:<p><span class="glyphicon glyphicon-time"></span>Posted: @datestringp</p>
                        }
                        @if (Model.Updated != null)
                        {
                            var daysup = (System.DateTimeOffset.Now - Model.Updated.Value).Days;
                            var hoursup = (System.DateTimeOffset.Now - Model.Updated.Value).Hours;
                            var minsup = (System.DateTimeOffset.Now - Model.Updated.Value).Minutes;
                            string datestringup = "";
                            if (daysup > 0)
                            {
                                datestringup += daysup + " days, ";
                            }
                            if (hoursup > 0 || daysup > 0)
                            {
                                datestringup += hoursup + " hours, ";
                            }
                            if (minsup > 0 || hoursup > 0 || daysup > 0)
                            {
                                datestringup += minsup + " mins ago";
                            }
                            else
                            {
                                datestringup = "~1 min ago";
                            }
                            @:<p><span class="glyphicon glyphicon-time"></span>Updated: @datestringup</p>
                        }
                        <hr class="hrcolor">
                        @Html.Raw(Model.Body)
                        <hr class="hrcolor">
                    </div>
                </div>
                <br />
                <br />
                <div class="row">
                    <div class="col-xs-12 boxshadowblog">
                        <h3 class="padc">Comment Section</h3>
                    </div>
                </div>
                @foreach (var comment in Model.Comments)
                {
                    var author = comment.Author;
                    @:<div class="row boxshadowblog padcc">
                    @:<div class="col-xs-12">
                    @:<p class="margin-b-l">Display Name: @author.DisplayName</p>
                    var days = (System.DateTimeOffset.Now - comment.Created).Days;
                    var hours = (System.DateTimeOffset.Now - comment.Created).Hours;
                    var mins = (System.DateTimeOffset.Now - comment.Created).Minutes;
                    string datestring = "";
                    if(days > 0)
                    {
                        datestring += days + " days, ";
                    }
                    if(hours > 0 || days > 0)
                    {
                        datestring += hours + " hours, ";
                    }
                    if(mins > 0 || hours > 0 || days > 0)
                    {
                        datestring += mins + " mins ago";
                    }
                    else
                    {
                        datestring = "~1 min ago";
                    }
                    @:<span class="glyphicon glyphicon-time"></span>Posted: @datestring
                     if (comment.Updated != null)
                     {
                        var daysu = (System.DateTimeOffset.Now - comment.Updated.Value).Days;
                        var hoursu = (System.DateTimeOffset.Now - comment.Updated.Value).Hours;
                        var minsu = (System.DateTimeOffset.Now - comment.Updated.Value).Minutes;
                        string datestringu = "";
                        if (daysu > 0)
                        {
                            datestringu += daysu + " days, ";
                        }
                        if (hoursu > 0 || daysu > 0)
                        {
                            datestringu += hoursu + " hours, ";
                        }
                        if (minsu > 0 || hoursu > 0 || daysu > 0)
                        {
                            datestringu += minsu + " mins ago";
                        }
                        else
                        {
                            datestringu = "~1 min ago";
                        }   
                        @:<span class="glyphicon glyphicon-time margin-l"></span>Updated: @datestringu
                     }
                    @:<hr class="hrcolor">
                    @:<p id="B @comment.Id" class="padcb">@comment.Body</p>
                    if (comment.Updated == null)
                    {
                        @:<p id="U @comment.Id" hidden>Update Reason: @comment.UpdateReason</p>
                     }
                    else
                    {
                        @:<p id="U @comment.Id">Update Reason: @comment.UpdateReason</p>
                     }
                    if (User.Identity.GetUserId() == comment.AuthorId || User.IsInRole("Admin") || User.IsInRole("Mod"))
                    {
                        @:<form role="form" action="@Url.Action("EComment", "Blog")" method="post" id="F @comment.Id" hidden>
                            @Html.AntiForgeryToken()
                            @:<input type="hidden" name="Id" value="@comment.Id" />
                            @:<textarea name="Body" rows="3" cols="80" required>@comment.Body</textarea><br />
                            @:Update Reason: <input type="text" name="UpdateReason" value="@comment.UpdateReason" required/><br />
                            @:<button type="submit" class="btn btn-default btn-sm boxshadow margin-b margin-t"><span class="network-name shadow">Submit Changes</span></button>
                        @:</form>
                        @:<form role="form" action="@Url.Action("DComment", "Blog")" method="post" class="formalign">
                            @Html.AntiForgeryToken()
                            @:<input type="hidden" name="Id" value="@comment.Id" />
                            @:<button type="submit" class="btn btn-default btn-sm boxshadow"><span class="network-name shadow">Delete</span></button>
                        @:</form>
                        @:<button id="@comment.Id" onclick="EditComment(this.id)" class="btn btn-default btn-sm boxshadow"><span class="network-name shadow">Edit</span></button>
                    }
                    @:</div>
                    @:</div>
                    @:<br />
                }
                <div class="well boxshadowblog">
                    @if (System.Web.HttpContext.Current.User.Identity.IsAuthenticated)
                    {
                        @:<h4>Leave a Comment:</h4>
                        @:<form role="form" action="@Url.Action("SComment", "Blog")" method="post">
                            @Html.AntiForgeryToken()
                            @:<input type="hidden" name="PostId" value="@Model.Id" />
                            @:<div class="form-group">
                                @:<textarea class="form-control" rows="3" name="Body"></textarea>
                            @:</div>
                            @:<button type="submit" class="btn btn-default btn-sm boxshadow"><span class="network-name shadow">Submit</span></button>
                        @:</form>
                    }
                    else
                    {
                        @:Please <a href="@Url.Action("LogIn", "Account")">Log In</a> to comment on posts.
                    }
                </div>
            </div>
        </div>
</body>

<script src="~/Scripts/Comment.js"></script>
@section Scripts {
    <script>
        $(document).ready(function () {
            $("#editor").tinymce({});
        });
    </script>
}